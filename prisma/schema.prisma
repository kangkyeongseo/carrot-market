// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String 
  avatar String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]
  writtenReviews Review[] @relation(name:"writtenReviews")
  receievedReviews Review[]  @relation(name:"receievedReviews")
  favs Fav[]
  sales Sale[]
  purchases Purchase[]
  record Record[]
  streams Stream[]
  messages Message[]
  productRooms Room[] @relation(name:"productUser")
  ownerRooms Room[] @relation(name:"ownerUser")
  chats Chat[]
} 

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
} 

model Product {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  image String
  name String
  price Int
  description String @db.MediumText
  favs Fav[]
  sales Sale[]
  purchases Purchase[]
  record Record[]
  rooms Room[]
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText
  latitude  Float?
  longitude Float?
  answers Answer[]
  wonderings Wondering[]
}

model Answer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText 
}

model Wondering {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Review {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  review String @db.MediumText
  score Int @default(1)
  createdBy User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name: "receievedReviews",fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
}

model Fav {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete:  Cascade)
  productId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Sale {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete:  Cascade)
  productId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Purchase {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete:  Cascade)
  productId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Record {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete:  Cascade)
  productId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  kind Kind
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  name String
  description String @db.MediumText
  price Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  messages Message[]
  cloudflareId String
  cloudflareUrl String
  cloudflareKey String
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  message String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
}

model Room {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  productUser User @relation(name:"productUser", fields: [productUserId], references: [id], onDelete: Cascade)
  productUserId Int
  ownerUser User @relation(name:"ownerUser", fields: [ownerUserId], references: [id], onDelete: Cascade)
  ownerUserId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  chats Chat[]
  reservation Reservation[]
}

model Chat {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  chat String
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int
}

model Reservation {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int
}